print(typeof(x))
# Create a vector
x <- c(1.8)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x, 'a')
# Check the type of x
typeof(x)
# Create a vector
x <- c(TRUE)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x, 2)
# Check the type of x
typeof(x)
# Create a vector
x <- c('a')
# Check the type of x
typeof(x)
# Add a logical value to the vector
x <- c(x,TRUE)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
# Retrieve the element named type
my_pie[["type"]]
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade, state, homeownership, disbursement_method) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
install.packages("openintro")
# Method 3
x <- c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x <- c(1L,2L,3L,4L,5L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x <- c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Install package
install.packages("openintro")
install.packages("openintro")
setwd("~/R/NM2207/Week-3")
setwd("~/R/NM2207/Week-3")
unlink("Code-along-3_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
x <- "ğŸ˜„"
x
x <- "ğŸ˜„"
x
typeof(x)
x <- c("a","b")
typeof(x)
x <- c("a","b")
x
typeof(x)
# Enter code here
ages <- c(25, 30, 22, 28, 33)
print(ages)
# Enter code here
student_info <- list(student_names = c("Alice", "Bob", "Catherine"), scores = c(85, 92, 78), passed = c(TRUE,TRUE,FALSE))
print(student_info)
# Enter code here
typeof(10)
typeof(15.5)
typeof("20")
typeof(TRUE)
# Enter code here
typeof(10)
typeof(15.5)
typeof("20")
typeof(TRUE)
# If referring to type of each element after they've been coerced into the vector
data <- c(10, 15.5, "20", TRUE)
# Enter code here
typeof(10)
typeof(15.5)
typeof("20")
typeof(TRUE)
# If referring to type of each element after they've been coerced into the vector
data <- c(10, 15.5, "20", TRUE)
typeof(data[0])
typeof(data[1])
typeof(data[2])
typeof(data[3])
# If referring to type of each element after they've been coerced into the vector
data <- c(10, 15.5, "20", TRUE)
typeof(data[0])
typeof(data[1])
typeof(data[2])
typeof(data[3])
# Enter code here
typeof(10)
typeof(15.5)
typeof("20")
typeof(TRUE)
# Enter code here
prices <- c(20.5, 15, as.numeric("25"))
print(prices)
# Enter code here
combined <- c(c(5,10,15), c("apple","banana","cherry"))
print(combined)
# Enter code here
numbers <- (7, 12.5, "15.7")
# Enter code here
numbers <- (7, 12.5, "15.7")
# Enter code here
numbers <- (7,12.5, "15.7")
# Enter code here
numbers <- c(7,12.5, "15.7")
numbers
#R will not handle the data type conversion
# Enter code here
numbers <- c(7,12.5, "15.7")
#R will not handle the data type conversion
numbers_converted <- as.numeric(numbers)
sum(numbers_converted)
# Enter code here
numbers <- c(7,12.5, "15.7")
#R will not handle the data type conversion
numbers_converted <- as.numeric(numbers)
numbers_converted
sum(numbers_converted)
# Enter code here
numbers <- c(7,12.5, "15.7")
#R will not handle the data type conversion
numbers_converted <- as.numeric(numbers)
sum(numbers_converted)
# Enter code here
numbers <- c(7,12.5, "15.7")
#R will not handle the data type conversion
sum(as.numeric(numbers))
# Enter code here
grades <- c(85, 90.5, "75.2")
# Expected mean result is an error
mean(as.numeric(grades))
# Enter code here
mixed_data <- list(c(10,20,30), c("red","green","blue"), c(TRUE,FALSE,TRUE))
mean(mixed_data[[1]])
mixed_data[[1]]
# Enter code here
mixed_data <- list(c(10,20,30), c("red","green","blue"), c(TRUE,FALSE,TRUE))
mean(mixed_data[[1]])
# Enter code here
student_info
# Enter code here
student_info[[scores]]
# Enter code here
student_info[scores]
# Enter code here
student_info["scores"]
# Enter code here
student_info[["scores"]]
# Enter code here
student_info[["scores"]]$1
# Enter code here
student_info[["scores"]][1]
# Enter code here
student_info
# Enter code here
student_info
student_info[["scores"]][student_info[["student_names"]]="Bob"]
# Enter code here
student_info
student_info[["scores"]][student_info[["student_names"]]=="Bob"]
# Enter code here
student_info[["scores"]][student_info[["student_names"]]=="Bob"]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random[-1]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random[1]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random[length(random)]
random
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random[length(random)]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random[length(random)]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random[length(random)]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random[length(random)]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random
random[length(random)]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random
random[length(random)]
# Enter code here
random <- rnorm(10, mean = 10, sd = 10)
random
random[length(random)]
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
words == "apple"
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
match("apple", words)
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
match("apple", words)
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
match("apple", words)
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
which(words == "apple")
# Enter code here
ages <- rnorm(10, mean = 30, sd = 20)
filter(ages, ages > 30)
ages
# Enter code here
ages <- as.integer(rnorm(10, mean = 30, sd = 20))
filter(ages, ages > 30)
ages
# Enter code here
ages <- as.integer(rnorm(10, mean = 30, sd = 20))
ages
ages[ages > 30]
# Enter code here
sequence <- 1:20
# Enter code here
sequence <- 1:20
sequence
# Enter code here
sequence <- 1:20
sequence
sequence(FALSE,FALSE,TRUE)
sequence(FALSE,FALSE,TRUE)
# Enter code here
sequence <- 1:20
sequence
sequence(FALSE,FALSE,TRUE)
# Enter code here
sequence <- 1:20
sequence
sequence[FALSE,FALSE,TRUE]
# Enter code here
sequence <- 1:20
sequence
sequence[c(FALSE,FALSE,TRUE)]
seq(1, length(sequence), by = 3)
sequence[c(FALSE,FALSE,TRUE)]
seq(0, length(sequence), by = 3)
# Enter code here
sequence <- 1:20
seq(0, length(sequence), by = 3)
# Enter code here
sequence <- 1:20
sequence
sequence[c(FALSE,FALSE,TRUE)]
# Enter code here
sequence <- 1:20
sequence
sequence[c(FALSE,FALSE,TRUE)]
# Enter code here
sequence <- 1:20
sequence
sequence[c(FALSE,FALSE,TRUE)]
# Enter code here
more_numbers <- 1:10
# Enter code here
more_numbers <- 1:10
more_numbers[5:7]
# Enter code here
data <- c(10, NA, 15, 20)
is.na(data)
# Enter code here
temperatures <- rnorm(10, mean = 90, sd = 50)
hot_days <- temperatures > 90
print(hot_days)
# Enter code here
temperatures <- rnorm(10, mean = 90, sd = 50)
hot_days <- temperatures > 90
length(temperatures[hot_days])
# Enter code here
fruits <- c("apple", "banana", "avocado", "kiwi", "pineapple", "orange", "watermelon", "dragonfruit")
long_names <- nchar(fruits) > 6
long_names
# Enter code here
fruits <- c("apple", "banana", "avocado", "kiwi", "pineapple", "orange", "watermelon", "dragonfruit")
long_names <- fruits[nchar(fruits) > 6]
long_names
# Enter code here
fruits <- c("apple", "banana", "avocado", "kiwi", "pineapple", "orange", "watermelon", "dragonfruit")
long_names <- nchar(fruits) > 6
long_names
# Enter code here
fruits <- c("apple", "banana", "avocado", "kiwi", "pineapple", "orange", "watermelon", "dragonfruit")
long_names <- nchar(fruits) > 6
print(fruits[long_names])
numbers % 5
numbers %% 5
numbers %% 5
numbers %% 5
numbers %% 5
numbers %% 5
numbers %% 5
numbers %% 5
numbers %% 5
numbers %% 5
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
divisible_by_5
# Enter code here
numbers <- as.integer(rnorm(10, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
divisible_by_5
# Enter code here
numbers <- as.integer(rnorm(50, mean = 50, sd = 40))
divisible_by_5 <- numbers %% 5 == 0
numbers[divisible_by_5]
# Enter code here
vector1 <- as.integer(rnorm(50, mean = 50, sd = 40))
vector2 <- as.integer(rnorm(50, mean = 50, sd = 40))
vector1 > vector 2
# Enter code here
vector1 <- as.integer(rnorm(50, mean = 50, sd = 40))
vector2 <- as.integer(rnorm(50, mean = 50, sd = 40))
comparisons <- vector1 > vector 2
# Enter code here
vector1 <- as.integer(rnorm(50, mean = 50, sd = 40))
vector2 <- as.integer(rnorm(50, mean = 50, sd = 40))
comparisons <- vector1[vector1 > vector 2]
# Enter code here
vector1 <- as.integer(rnorm(50, mean = 50, sd = 40))
vector2 <- as.integer(rnorm(50, mean = 50, sd = 40))
comparisons <- vector1 > vector2
print(comparisons)
# Enter code here
vector1 <- as.integer(rnorm(10, mean = 50, sd = 40))
vector2 <- as.integer(rnorm(10, mean = 50, sd = 40))
comparisons <- vector1 > vector2
print(comparisons)
# Enter code here
numbers <- c(5,10,15)
words <- c("apple","banana","cherry")
combined <- c(numbers, words)
print(combined)
# The numeric values were converted into character values, as there were other character values in the vector and the vector can only contain values of a single data type.
# Enter code here
numbers <- c(5,10,15)
words <- c("apple","banana","cherry")
combined <- c(numbers, words)
print(combined)
typeof(combined)
# The numeric values were converted into character values, as there were other character values in the vector and the vector can only contain values of a single data type.
# Enter code here
sequence <- 1:20
sequence[seq(0, 1, 3)]
# Enter code here
sequence <- 1:20
sequence[seq(from=0, to=20, by=3)]
# Enter code here
sequence <- 1:20
sequence[seq(from=0, to=20, by=3)]
# Enter code here
data <- c(10, NA, 15, 20)
is.na(data[2])
